pragma solidity ^0.4.24;

import "./PorthosContract.sol";

contract Gateway {

  // The Events generated by the framework (outward)

  // Simple Log Messages
  event Log(string message, uint blockNumber, address sender);

  // A request to register a callback at a certain time
  event CallbackRequest(address contractAddress, string methodName, uint timeRequested);

  // A request to cancel a previously registered contract
  event CallbackCancel(address contractAddress, string methodName, uint timeRequested);

  // A crosschain call - calls another address on a specific method
  event CrossChain(string blockchainSystem, address contractAddress, string methodName);

  // A crosschain call to open a gate
  event CCOpenGate(string blockchainSystem, address contractAddress, string assetType, string gateName);

  // A crosschain call to release commitments of type
  event CCReleaseCommitments(string blockchainSystem, address contractAddress, string assetType);

  // A crosschain call to cancel commitments
  event CCCancelCommitments(string blockchainSystem, address contractAddress, string assetType);

  // An event to indicate that a gate has been opened, and the user can now perform his action
  event GateOpened(string gateName);

  // An event to indicate that a gate is closed, by user action or by timeout
  event GateClosed(string gateName, bool timeout);


  // Emitting of Events Section
  function fireMessage(string _message) public {
  	emit Log(_message, block.number, tx.origin);
  }

  function requestCallback(address _contractAddress, string _methodName, uint _timeRequested) public {
  	emit CallbackRequest(_contractAddress, _methodName, _timeRequested);
  	emit Log("Request Callback", block.number, tx.origin);
  }

  function cancelCallback(address _contractAddress, string _methodName, uint _timeRequested) public {
  	emit CallbackCancel(_contractAddress, _methodName, _timeRequested);
  }

  function initiateCCC(string _bcSystem, address _contractAddress, string _methodName) public {
  	emit CrossChain(_bcSystem, _contractAddress, _methodName);
  }

  function ccOpenGate(string _bcSystem, address _contractAddress, string _assetType, string _gateName) public {
    emit CCOpenGate(_bcSystem, _contractAddress, _assetType, _gateName);
  }

  function ccReleaseCommitments(string _bcSystem, address _contractAddress, string _assetType) public {
    emit CCReleaseCommitments(_bcSystem, _contractAddress, _assetType);
  }

  function ccCancelCommitments(string _bcSystem, address _contractAddress, string _assetType) public {
    emit CCCancelCommitments(_bcSystem, _contractAddress, _assetType);
  }

  function gateOpened(string _gateName) public {
    emit GateOpened(_gateName);
  }

  function gateClosed(string _gateName, bool _timeout) public {
    emit GateClosed(_gateName, _timeout);
  }

  // Call Functions
  function call(address contractAddress, string method) public {
    if (!contractAddress.call(bytes4(keccak256(abi.encodePacked(method))))) 
      revert();
  }

  function openGateCall(address contractAddress, string assetType, string gateName) public {
    PorthosContract c = PorthosContract(contractAddress);
    c.openGate(assetType, gateName);
  }

  function releaseAllCommitmentsCall(address contractAddress, string assetType) public {
    PorthosContract c = PorthosContract(contractAddress);
    c.releaseAllCommitments(assetType);
  }

  function cancelAllCommitmentsCall(address contractAddress, string assetType) public {
    PorthosContract c = PorthosContract(contractAddress);
    c.cancelAllCommitments(assetType);
  }

}